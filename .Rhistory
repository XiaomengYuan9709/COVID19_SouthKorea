if (class(EPSG) != "try-error") EPSG[grep("^# ED50$", EPSG$note),]
###################################################
### code chunk number 17: die.Rnw:358-368
###################################################
IJ.east <- as(char2dms("4d31\'00\"E"), "numeric")
IJ.north <- as(char2dms("52d28\'00\"N"), "numeric")
IJ.ED50 <- SpatialPoints(cbind(x=IJ.east, y=IJ.north), proj4string=ED50)
### R code from vignette source 'die.Rnw'
### Encoding: UTF-8
# data: scotland.dat scot geohub.RData fires_120104 70042108.tif getosm.RData osm_bergen_120105.tif RgoogleMaps.RData osmar.RData
###################################################
### code chunk number 9: die.Rnw:95-96
###################################################
library(rgdal)
###################################################
### code chunk number 15: die.Rnw:306-307
###################################################
CRS("+init=epsg:4230")
###################################################
### code chunk number 16: die.Rnw:330-332
###################################################
ED50 <- CRS("+init=epsg:4230 +towgs84=-87,-96,-120,0,0,0,0")
ED50
IJ.ED50 <- SpatialPoints(cbind(x=IJ.east, y=IJ.north), proj4string=ED50)
res <- spTransform(IJ.ED50, CRS("+proj=longlat +datum=WGS84"))
View(res)
x <- as(dd2dms(coordinates(res)[1]), "character")
y <- as(dd2dms(coordinates(res)[2], TRUE), "character")
cat(x, y, "\n")
spDistsN1(coordinates(IJ.ED50), coordinates(res), longlat=TRUE)*1000
library(maptools)
gzAzimuth(coordinates(IJ.ED50), coordinates(res))
###################################################
### code chunk number 19: die.Rnw:430-434
###################################################
proj4string(IJ.ED50) <- CRS("+init=epsg:4230")
###################################################
### code chunk number 19: die.Rnw:430-434
###################################################
proj4string(IJ.ED50) <- CRS("+init=epsg:4230")
res <- spTransform(IJ.ED50, CRS("+proj=longlat +datum=WGS84"))
spDistsN1(coordinates(IJ.ED50), coordinates(res), longlat=TRUE)*1000
gzAzimuth(coordinates(IJ.ED50), coordinates(res))
###################################################
### code chunk number 21: die.Rnw:449-450
###################################################
if (class(EPSG) != "try-error") EPSG[grep("Atlas", EPSG$note), 1:2]
###################################################
### code chunk number 14: die.Rnw:264-266
###################################################
# From PROJ 6.0.0, EPSG data stored in an SQLite database without proj4 strings
EPSG <- try(make_EPSG())
if (class(EPSG) != "try-error") EPSG[grep("^# ED50$", EPSG$note),]
###################################################
### code chunk number 21: die.Rnw:449-450
###################################################
if (class(EPSG) != "try-error") EPSG[grep("Atlas", EPSG$note), 1:2]
grep("Atlas", EPSG$note)
###################################################
### code chunk number 21: die.Rnw:449-450
###################################################
if (class(EPSG) != "try-error") EPSG[grep("Atlas", EPSG$note), 1:2]
View(EPSG)
###################################################
### code chunk number 22: die.Rnw:452-453
###################################################
CRS("+init=epsg:2163")
###################################################
### code chunk number 24: die.Rnw:475-479
###################################################
proj <- projInfo("proj")
proj[proj$name == "laea",]
ellps <- projInfo("ellps")
ellps[grep("a=6370997", ellps$major),]
###################################################
### code chunk number 25: die.Rnw:521-523
###################################################
IJ.dms.E <- "4d31\'00\"E"
IJ.dms.N <- "52d28\'00\"N"
###################################################
### code chunk number 26: die.Rnw:533-538
###################################################
IJ_east <- char2dms(IJ.dms.E)
IJ_north <- char2dms(IJ.dms.N)
IJ_east
IJ_north
###################################################
### code chunk number 27: die.Rnw:552-553
###################################################
c(as(IJ_east, "numeric"), as(IJ_north, "numeric"))
28/60
###################################################
### code chunk number 28: die.Rnw:672-673
###################################################
head(ogrDrivers(), n=10)
###################################################
### code chunk number 31: die.Rnw:733-735
###################################################
scot_dat <- read.table("/Users/xiaomengyuan/Documents/Career/Skills/Statistics/modeling/nCoV2019/Applied Spatial Analysis with R/Chap4/scotland.dat", skip=1)
View(scot_dat)
names(scot_dat) <- c("District", "Observed", "Expected", "PcAFF", "Latitude", "Longitude")
###################################################
### code chunk number 34: die.Rnw:760-761
###################################################
ogrInfo(".", "scot")
library(rgdal)
###################################################
### code chunk number 34: die.Rnw:760-761
###################################################
ogrInfo(".", "scot")
###################################################
### code chunk number 37: die.Rnw:791-794
###################################################
scot_LL <- readOGR(dsn="scot.shp", layer="scot", integer64="allow.loss")
### R code from vignette source 'die.Rnw'
### Encoding: UTF-8
# data: scotland.dat scot geohub.RData fires_120104 70042108.tif getosm.RData osm_bergen_120105.tif RgoogleMaps.RData osmar.RData
###################################################
### code chunk number 9: die.Rnw:95-96
###################################################
library(rgdal)
###################################################
### code chunk number 14: die.Rnw:264-266
###################################################
# From PROJ 6.0.0, EPSG data stored in an SQLite database without proj4 strings
EPSG <- try(make_EPSG())
if (class(EPSG) != "try-error") EPSG[grep("^# ED50$", EPSG$note),]
###################################################
### code chunk number 15: die.Rnw:306-307
###################################################
CRS("+init=epsg:4230")
###################################################
### code chunk number 16: die.Rnw:330-332
###################################################
ED50 <- CRS("+init=epsg:4230 +towgs84=-87,-96,-120,0,0,0,0")
ED50
###################################################
### code chunk number 17: die.Rnw:358-368
###################################################
IJ.east <- as(char2dms("4d31\'00\"E"), "numeric")
IJ.north <- as(char2dms("52d28\'00\"N"), "numeric")
IJ.ED50 <- SpatialPoints(cbind(x=IJ.east, y=IJ.north), proj4string=ED50)
res <- spTransform(IJ.ED50, CRS("+proj=longlat +datum=WGS84"))
x <- as(dd2dms(coordinates(res)[1]), "character")
y <- as(dd2dms(coordinates(res)[2], TRUE), "character")
cat(x, y, "\n")
spDistsN1(coordinates(IJ.ED50), coordinates(res), longlat=TRUE)*1000
library(maptools)
gzAzimuth(coordinates(IJ.ED50), coordinates(res))
###################################################
### code chunk number 19: die.Rnw:430-434
###################################################
proj4string(IJ.ED50) <- CRS("+init=epsg:4230")
res <- spTransform(IJ.ED50, CRS("+proj=longlat +datum=WGS84"))
spDistsN1(coordinates(IJ.ED50), coordinates(res), longlat=TRUE)*1000
gzAzimuth(coordinates(IJ.ED50), coordinates(res))
###################################################
### code chunk number 21: die.Rnw:449-450
###################################################
if (class(EPSG) != "try-error") EPSG[grep("Atlas", EPSG$note), 1:2]
###################################################
### code chunk number 22: die.Rnw:452-453
###################################################
CRS("+init=epsg:2163")
###################################################
### code chunk number 24: die.Rnw:475-479
###################################################
proj <- projInfo("proj")
proj[proj$name == "laea",]
ellps <- projInfo("ellps")
ellps[grep("a=6370997", ellps$major),]
###################################################
### code chunk number 25: die.Rnw:521-523
###################################################
IJ.dms.E <- "4d31\'00\"E"
IJ.dms.N <- "52d28\'00\"N"
###################################################
### code chunk number 26: die.Rnw:533-538
###################################################
IJ_east <- char2dms(IJ.dms.E)
IJ_north <- char2dms(IJ.dms.N)
IJ_east
IJ_north
getSlots("DMS")
###################################################
### code chunk number 27: die.Rnw:552-553
###################################################
c(as(IJ_east, "numeric"), as(IJ_north, "numeric"))
###################################################
### code chunk number 28: die.Rnw:672-673
###################################################
head(ogrDrivers(), n=10)
###################################################
### code chunk number 31: die.Rnw:733-735
###################################################
scot_dat <- read.table("/Users/xiaomengyuan/Documents/Career/Skills/Statistics/modeling/nCoV2019/Applied Spatial Analysis with R/Chap4/scotland.dat", skip=1)
names(scot_dat) <- c("District", "Observed", "Expected", "PcAFF", "Latitude", "Longitude")
###################################################
### code chunk number 34: die.Rnw:760-761
###################################################
ogrInfo(".", "scot")
###################################################
### code chunk number 34: die.Rnw:760-761
###################################################
ogrInfo("scot.shp", "scot")
###################################################
### code chunk number 37: die.Rnw:791-794
###################################################
scot_LL <- readOGR(dsn="scot.shp", layer="scot", integer64="allow.loss")
###################################################
### code chunk number 34: die.Rnw:760-761
###################################################
ogrInfo("/Users/xiaomengyuan/Documents/Career/Skills/Statistics/modeling/nCoV2019/Applied Spatial Analysis with R/Chap4", "scot")
###################################################
### code chunk number 37: die.Rnw:791-794
###################################################
scot_LL <- readOGR(dsn="/Users/xiaomengyuan/Documents/Career/Skills/Statistics/modeling/nCoV2019/Applied Spatial Analysis with R/Chap4/scot.shp", layer="scot", integer64="allow.loss")
View(scot_LL)
proj4string(scot_LL)
proj4string(scot_LL) <- CRS("+proj=longlat +ellps=WGS84")
###################################################
### code chunk number 39: die.Rnw:803-805
###################################################
sapply(slot(scot_LL, "data"), class)
scot_LL$ID
###################################################
### code chunk number 40: die.Rnw:817-825
###################################################
scot_dat$District
ID_D <- match(scot_LL$ID, scot_dat$District)
ID_D
row.names(scot_LL)
scot_dat1 <- scot_dat[ID_D,]
row.names(scot_dat1) <- row.names(scot_LL)
library(maptools)
View(scot_dat1)
row.names(scot_dat1) <- row.names(scot_LL)
library(maptools)
scot_LLa <- spCbind(scot_LL, scot_dat1)
all.equal(scot_LLa$ID, scot_LLa$District)
names(scot_LLa)
View(scot_LLa)
?spTransform()
###################################################
### code chunk number 41: die.Rnw:846-852
###################################################
library(spdep)
library(DCluster)
install.packages("DCluster", lib="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
###################################################
### code chunk number 41: die.Rnw:846-852
###################################################
library(spdep)
O <- scot_LLa$Observed
E <- scot_LLa$Expected
scot_LLa$SMR <- probmap(O, E)$relRisk/100
library(DCluster)
scot_LLa$smth <- empbaysmooth(O, E)$smthrr
View(scot_LLa)
###################################################
### code chunk number 42: die.Rnw:863-864
###################################################
scot_BNG <- spTransform(scot_LLa, CRS("+init=epsg:27700"))
plot(scot_BNG)
plot(scot_LLa)
library(rgdal)
load("/Users/xiaomengyuan/Documents/Career/Skills/Statistics/modeling/nCoV2019/GitHub/COVID19_SouthKorea/Kobs.RData")
View(data2)
library(ggplot2)
library(tidyr)
data <- read.csv("Covid19_KCDC_Geo.csv")
setwd("~/Documents/Career/Skills/Statistics/modeling/nCoV2019/GitHub/COVID19_SouthKorea")
data <- read.csv("Covid19_KCDC_Geo.csv")
summary(data)
summary(data$location)
data$ID <- as.factor(data$ID)
summary(data$ID)
data$level <- rep(NA, 1114)
# add column level, city vs. province
for (i in 1:1114) {
ifelse(data$ID[i]==1 || data$ID[i]==4 || data$ID[i]==5 || data$ID[i]==7 ||
data$ID[i]==11 || data$ID[i]==15 || data$ID[i]==16 ||data$ID[i]==17,
data$level[i] <- "city", data$level[i] <- "province")
}
data$level <- as.factor(data$level)
summary(data$level)
# convert to date object
data$date <- as.Date(data$date)
# delete observations with time=16:00, as most obs w/ time= 0:00 and
# it's closer to 9:00.
data1 <- data[data$time!= "16:00", ]
# delete observations from Airport
data2 <- data1[data1$ID!=0, ]
row.names(data2) <- 1:1020
# create a column to represent difference between row i and i-1
data2$diff <- c(NA, diff(data2$total))
# check if new (newly confirmed) is equal to diff in total
dv <- which(data2$new!= data2$diff)
dv # rows where new != diff, a few cases
# [1]   5   6  69 190 191 219 245 249 250 305 425 485 486 491 785 786 905 906
# check these rows
# not verified w/ KCDC website yet as of 08-25-2020,
# it needs to check 6 notices (3 notices * 2 days) on KCDC for each occasion
# consider use column diff for sensitivity test
dr <- data2[dv, ]
View(dr)
###plot to check for if values looks correct
p <- ggplot(data2, aes(x=date, y=total)) +
geom_line() +
facet_wrap(~ID)
p
p1 <- ggplot(data2, aes(x=date, y=new)) +
geom_line() +
facet_wrap(~ID)
p1
########check if total is non-decreasing
nd <-which(diff(data2$total)<0)
nd
####### Check for NA
summary(data2$new)
summary(data2$total)
which(is.na(data2$total)) #every location missing 2-21 to 2-23
kna <- which(is.na(data2$total)) #every location missing 2-21 to 2-23
###### create t*i maxtrix for sts object
data3<-data2[ ,c(2,3,6)]
View(data3)
obs1 <- spread(data3, location, new)
View(data2)
save.image("~/Documents/Career/Skills/Statistics/modeling/nCoV2019/GitHub/COVID19_SouthKorea/Kobs.RData")
View(obs1)
saveRDS(obs1, file="obs1.RDS" )
View(p1)
# check if new (newly confirmed) is equal to diff in total
dv <- which(data2$new!= data2$diff)
dv # rows where new != diff, a few cases
nd
View(data3)
View(data2)
load("/Users/xiaomengyuan/Documents/Career/Skills/Statistics/modeling/nCoV2019/GitHub/COVID19_SouthKorea/Kobs.RData")
obs1 <- readRDS("~/Documents/Career/Skills/Statistics/modeling/nCoV2019/GitHub/COVID19_SouthKorea/obs1.RDS")
View(obs1)
setwd("~/Documents/Career/Skills/Statistics/modeling/nCoV2019/Korea_map/KOR_adm")
setwd("~/Documents/Career/Skills/Statistics/modeling/nCoV2019/Korea_map/KOR_adm")
drv <- "ESRI Shapefile"
kmap <- readOGR(".", layer = "KOR_adm1")
library(rgdal)
#############################################################
# simplify map to reduce size and speed up plotting
kmap1 <- gSimplify(kmap, tol=.01)
library(rgeos)
#############################################################
# simplify map to reduce size and speed up plotting
kmap1 <- gSimplify(kmap, tol=.01)
kmap <- readOGR(".", layer = "KOR_adm1")
kmap2<- SpatialPolygonsDataFrame(kmap1, kmap@data)
#############################################################
# simplify map to reduce size and speed up plotting
kmap1 <- gSimplify(kmap, tol=.01)
kmap2<- SpatialPolygonsDataFrame(kmap1, kmap@data)
sapply(slot(kmap, "polygons"), slot, "area") # check areas of each of 17 polygons
# calculate the matrix of adjacency orders
korder <- nbOrder(poly2adjmat(kmap2), maxlag = 10)
View(korder)
################population data
#website:http://www.citypopulation.de/php/southkorea-admin.php
pdata<- read.csv("kpop.csv")
setwd("~/Documents/Career/Skills/Statistics/modeling/nCoV2019/GitHub/COVID19_SouthKorea")
################population data
#website:http://www.citypopulation.de/php/southkorea-admin.php
pdata<- read.csv("kpop.csv")
save.image("~/Documents/Career/Skills/Statistics/modeling/nCoV2019/Korea_map/KOR_adm/kmap.RData")
View(kmap2)
kmap2@data[["NAME_1"]]
View(pdata)
sapply(slot(kmap2, "polygons"), slot, "area") # check areas of each of 17 polygons
sapply(slot(kmap, "polygons"), slot, "area") # check areas of each of 17 polygons
setwd("~/Documents/Career/Skills/Statistics/modeling/nCoV2019/GitHub/COVID19_SouthKorea")
saveRDS(korder, "korder.RDS")
saveRDS(kmap2, "kmap2.RDS")
saveRDS(pdata, "pdata.RDS")
kmap2 <- readRDS("~/Documents/Career/Skills/Statistics/modeling/nCoV2019/GitHub/COVID19_SouthKorea/kmap2.RDS")
load("~/Documents/Career/Skills/Statistics/modeling/nCoV2019/GitHub/COVID19_SouthKorea/Kobs.RData")
kmap2 <- readRDS("~/Documents/Career/Skills/Statistics/modeling/nCoV2019/GitHub/COVID19_SouthKorea/kmap2.RDS")
korder <- readRDS("~/Documents/Career/Skills/Statistics/modeling/nCoV2019/GitHub/COVID19_SouthKorea/korder.RDS")
obs1 <- readRDS("~/Documents/Career/Skills/Statistics/modeling/nCoV2019/GitHub/COVID19_SouthKorea/obs1.RDS")
pdata <- readRDS("~/Documents/Career/Skills/Statistics/modeling/nCoV2019/GitHub/COVID19_SouthKorea/pdata.RDS")
library(surveillance)
View(obs1)
observed <- obs[2:18,]
observed <- obs1[2:18,]
View(observed)
observed <- obs1[ , 2:18]
View(observed)
summary(observed)
View(pdata)
pdata <-t(pdata)
View(pdata)
pdata[1,]
pdata[2,]
matrix(rep(prow, each = 60), nrow = 60)
prow <- pdata[2,]
matrix(rep(prow, each = 60), nrow = 60)
pmatrix <- matrix(rep(prow, each = 60), nrow = 60)
View(pmatrix)
prow <- pdata[2,]
prow
head(pmatrix)
ksts <- sts(observed=observed, start=c(2020,1), frequency = 60, neighbourhood=korder, map=kmap2, population=pmatrix)
View(kmap2)
View(observed)
save.image("~/Documents/Career/Skills/Statistics/modeling/nCoV2019/GitHub/COVID19_SouthKorea/ksts.RData")
colnames(observed)
row.names(kmap2)
View(pdata)
View(korder)
kmap2@data[["NAME_1"]]
row.names(kmap2)
kmap2@data[["NAME_1"]]
row.names(kmap2)
kmap2@data[["NAME_1"]]
ksts <- sts(observed=observed, start=c(2020,1), frequency = 60, neighbourhood=korder, map=kmap2, population=pmatrix)
observed <- obs1[ , 2:18]
summary(observed)
colnames(observed)
observed <- obs1[ , 2:18]
#summary(observed)
colnames(observed)
View(obs1)
observed <- obs1[ , 2:18]
#summary(observed)
colnames(observed)
kobserved <- observed[, c(1, 2, 3, 4, 5, 6, 7, 10, 8, 9, 11, 12, 13, 14, 15, 16, 17)]
colnames(kobserved)
View(kobserved)
kobs <- kobserved
View(kobs)
colnames(kobs)<- c(0:16)
ksts <- sts(observed=kobs, start=c(2020,1), frequency = 60, neighbourhood=korder, map=kmap2, population=pmatrix)
View(ksts)
colnames(pmatrix)
View(pdata)
colnames(pdata)
pdata[1,]
colnames(kobserved)
plot(ksts, type = observed ~ time)
View(ksts)
pdata <- readRDS("~/Documents/Career/Skills/Statistics/modeling/nCoV2019/GitHub/COVID19_SouthKorea/pdata.RDS")
pdata <-as.numeric(t(pdata))
View(pdata)
pdata <- readRDS("~/Documents/Career/Skills/Statistics/modeling/nCoV2019/GitHub/COVID19_SouthKorea/pdata.RDS")
View(pdata)
pdata <-t(pdata)
prow <- pdata[2,]
pmatrix <- as.numeric(pmatrix)
View(pmatrix)
prow <- as.matrix(pdata[2,])
View(prow)
prow <- as.numeric(pdata[2,])
pmatrix <- matrix(rep(prow, each = 60), nrow = 60)
View(pmatrix)
colnames(pmatrix)
pdata[1,]
plot(ksts, type = observed ~ time)
ksts <- sts(observed=kobs, start=c(2020,1), frequency = 60, neighbourhood=korder, map=kmap2, population=pmatrix)
# one useful error message when I first attemp to construct a sts object: Error in validObject(.Object) : invalid class “sts” object: 1: 'map' is incomplete; ensure that all(colnames(observed) %in% row.names(map)) invalid class “sts” object: 2: 'colnames(neighbourhood)' differ from 'colnames(observed)'
plot(ksts, type = observed ~ time)
tpop <- sum(pdata[2,])
tpop <- sum(prow)
tpop
tpop <- sum(prow) # total population in the country
tpop
plot(ksts, type = observed ~ unit,
population = top/100000,
labels = list(font = 2), colorkey = list(space = "right"), sp.layout = layout.scalebar(ksts@map,
corner = c(0.05, 0.05), scale = 50, labels = c("0", "50 km"), height = 0.03))
tpop <- sum(prow) # total population in the country
tpop
plot(ksts, type = observed ~ unit,
population = tpop/100000,
labels = list(font = 2), colorkey = list(space = "right"), sp.layout = layout.scalebar(ksts@map,
corner = c(0.05, 0.05), scale = 50, labels = c("0", "50 km"), height = 0.03))
tpop <- sum(prow) # total population in the country
#tpop
plot(ksts, type = observed ~ unit,
population = tpop/100000,
labels = list(font = 2), colorkey = list(space = "right"), sp.layout = layout.scalebar(ksts@map,
corner = c(0.05, 0.05), scale = 50, labels = c("0", "50 km"), height = 0.03))
plot(ksts, type = observed ~ unit,
population = tpop/100000, labels = list(font = 2), colorkey = list(space = "right"), sp.layout = layout.scalebar(ksts@map,
corner = c(0.05, 0.05), scale = 50, labels = c("0", "50 km"), height = 0.03))
plot(ksts,
+    units = which(colSums(observed(ksts)) > 0))
plot(ksts, units = which(colSums(observed(ksts)) > 0))
library(animation)
animation::saveHTML(
animate(ksts, tps = 1:60, total.args = list()),
title = paste("Evolution of the COVID-19 epidemic in the south korea",
"region, 2020"), ani.width = 500, ani.height = 600)
summary(observed)
animate(ksts, tps = 1:60, total.args = list())
save.image("~/Documents/Career/Skills/Statistics/modeling/nCoV2019/GitHub/COVID19_SouthKorea/ksts.RData")
View(kobs)
# create a matrix with all -1 replaced with 0
kobs1 <- replace(kobs, kobs==-1, 0)
View(kobs1)
# create a sts object with all -1 observation replaced by 0
ksts1 <- sts(observed=kobs1, start=c(2020,1), frequency = 60, neighbourhood=korder, map=kmap2, population=pmatrix)
animation::saveHTML(
animate(ksts1, tps = 1:60, total.args = list()),
title = paste("Evolution of the COVID-19 epidemic in the South Korea",
"region, 2020"), ani.width = 500, ani.height = 600)
save.image("~/Documents/Career/Skills/Statistics/modeling/nCoV2019/GitHub/COVID19_SouthKorea/ksts.RData")
