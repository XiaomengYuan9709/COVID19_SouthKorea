read.delim("/Users/xiaomengyuan/Documents/Career/Skills/Statistics/modeling/nCoV2019/r-spatial-asdar-book.org-b1bdf88/docs/datasets/volcano.text")
read.delim("/Users/xiaomengyuan/Documents/Career/Skills/Statistics/modeling/nCoV2019/r-spatial-asdar-book.org-b1bdf88/docs/datasets/")
data("volcano")
View(volcano)
###################################################
### chunk number 62:
###################################################
volcano_sl <- ContourLines2SLDF(contourLines(volcano))
t(slot(volcano_sl, "data"))
slot(volcano_sl, "data")
###################################################
### chunk number 64:
###################################################
llCRS <- CRS("+proj=longlat +ellps=WGS84")
auck_shore <- MapGen2SL("auckland_mapgen.dat", llCRS)
auck_shore <- MapGen2SL("/Users/xiaomengyuan/Documents/Career/Skills/Statistics/modeling/nCoV2019/r-spatial-asdar-book.org-b1bdf88/docs/datasets/auckland_mapgen.dat", llCRS)
View(auck_shore)
summary(auck_shore)
View(auck_shore)
###################################################
### chunk number 66:
###################################################
lns <- slot(auck_shore, "lines")
View(lns)
sapply(lns, function(x) length(slot(x, "Lines")))
table(sapply(lns, function(x) length(slot(x, "Lines"))))
crds <- slot(slot(lns, "Lines")[[1]], "coords")
crds <- slot(slot(lns[[1]], "Lines")[[1]], "coords")
identical(crds[1,], crds[nrow(crds))
identical(crds[1,], crds[nrow(crds),])
table(sapply(lns, function(x) length(slot(x, "Lines"))))
islands_auck <- sapply(lns, function(x) {
crds <- slot(slot(x, "Lines")[[1]], "coords")
identical(crds[1,], crds[nrow(crds),])
})
table(islands_auck)
###################################################
### chunk number 67:
###################################################
getClass("Polygon")
###################################################
### chunk number 68:
###################################################
getClass("Polygons")
###################################################
### chunk number 70:
###################################################
getClass("SpatialPolygons")
###################################################
### chunk number 71:
###################################################
islands_sl <- auck_shore[islands_auck]
View(islands_sl)
View(auck_shore)
View(islands_sl)
list_of_Lines <- slot(islands_sl, "lines")
View(list_of_Lines)
slot(slot(list_of_Lines)[[1]], "Lines")[[1]]
slot(slot(list_of_Lines)[[1]], "Lines")[[1]]
slot(slot(slot(list_of_Lines)[[1]], "Lines")[[1]], "coords")
names(list_of_Lines[[1]])
islands_sp <- SpatialPolygons(lapply(list_of_Lines, function(x) {
Polygons(list(Polygon(slot(slot(x, "Lines")[[1]], "coords"))),
ID=slot(x, "ID"))
}),
# double use of slot the first slot() with no name argument?
proj4string=CRS("+proj=longlat +ellps=WGS84"))
summary(islands_sp)
slot(islands_sp, "plotOrder")
View(islands_sp)
sapply(slot(islands_sp, "polygons"),
function(x) slot(x, "area"))
###################################################
### chunk number 73:
###################################################
library(maps)
library(maptools)
state.map <- map("state", plot=FALSE, fill=TRUE)
map("state", plot=T, fill=TRUE)
strsplit(state.map$names, ":")
IDs <- sapply(strsplit(state.map$names, ":"), function(x) x[1])
state.sp <- map2SpatialPolygons(state.map, IDs=IDs,
proj4string=CRS("+proj=longlat +ellps=WGS84"))
View(state.sp)
data("worldMapEnv")
View(worldMapEnv)
###################################################
### chunk number 75:
###################################################
sat <- read.table("/Users/xiaomengyuan/Documents/Career/Skills/Statistics/modeling/nCoV2019/r-spatial-asdar-book.org-b1bdf88/docs/datasets/state.sat.data_mod.txt", row.names=5, header=TRUE)
View(sat)
str(sat)
sapply(slot(state.sp, "polygons"),
function(x) slot(x, "ID"))
id <- match(row.names(sat), sapply(slot(state.sp, "polygons"),
function(x) slot(x, "ID")))
row.names(sat)[is.na(id)]
sat[!is.na(id),]
state.spdf <- SpatialPolygonsDataFrame(state.sp, sat[!is.na(id),])
View(state.spdf)
str(slot(state.spdf, "data"))
str(state.spdf, max.level=2)
str(state.spdf, max.level=3)
View(sat)
###################################################
### chunk number 78:
###################################################
rownames(sat)[3] <- "Arizona"
try(SpatialPolygonsDataFrame(state.sp, sat[!is.na(id),]))
View(state.sp)
###################################################
### chunk number 79:
###################################################
DC <- "district of columbia"
not_dc <- !(row.names(slot(state.spdf, "data")) == DC)
state.spdf1 <- state.spdf[not_dc,]
View(state.spdf1)
length(slot(state.spdf1, "polygons"))
summary(state.spdf1)
summary(state.spdf1)
###################################################
### chunk number 80:
###################################################
# ** if you have the high resolution GSHHS shorelines database, use:
#high <- Rgshhs("gshhs_h.b", xlim=c(277,278),
# ylim=c(45.7,46.2))
# otherwise load a stored version from the bundle:
load("high.RData")
load("/Users/xiaomengyuan/Documents/Career/Skills/Statistics/modeling/nCoV2019/r-spatial-asdar-book.org-b1bdf88/docs/datasets/high.RData")
manitoulin_sp <- high$SP
View(high)
manitoulin_sp <- high$SP
View(manitoulin_sp)
###################################################
### chunk number 81:
###################################################
oopar <- par(mar=c(1,1,1,1)+0.1)
plot(manitoulin_sp, pbg="grey75", col="grey95")
text(t(sapply(slot(slot(manitoulin_sp, "polygons")[[1]], "Polygons"),
function(x) slot(x, "labpt")))[-c(1,2),], label=high$polydata$level[-c(1,2)],
col="black", font=2)
par(oopar)
View(high)
sapply(slot(slot(manitoulin_sp, "polygons")[[1]], "Polygons"),
function(x) slot(x, "labpt")))
sapply(slot(slot(manitoulin_sp, "polygons")[[1]], "Polygons"),
function(x) slot(x, "labpt"))
###################################################
### chunk number 82:
###################################################
length(slot(manitoulin_sp, "polygons"))
sapply(slot(slot(manitoulin_sp, "polygons")[[1]], "Polygons"),
function(x) slot(x, "hole"))
sapply(slot(slot(manitoulin_sp, "polygons")[[1]], "Polygons"),
function(x) slot(x, "ringDir"))
slot(manitoulin_sp, "polygons")[[1]]
slot(manitoulin_sp, "polygons")[[1]]
getClass(STS)
getClass(sts)
library(surveillance)
getClass(sts)
getClass("sts")
### R code from vignette source 'die.Rnw'
### Encoding: UTF-8
# data: scotland.dat scot geohub.RData fires_120104 70042108.tif getosm.RData osm_bergen_120105.tif RgoogleMaps.RData osmar.RData
###################################################
### code chunk number 9: die.Rnw:95-96
###################################################
library(rgdal)
###################################################
### code chunk number 14: die.Rnw:264-266
###################################################
# From PROJ 6.0.0, EPSG data stored in an SQLite database without proj4 strings
EPSG <- try(make_EPSG())
if (class(EPSG) != "try-error") EPSG[grep("^# ED50$", EPSG$note),]
###################################################
### code chunk number 17: die.Rnw:358-368
###################################################
IJ.east <- as(char2dms("4d31\'00\"E"), "numeric")
IJ.north <- as(char2dms("52d28\'00\"N"), "numeric")
IJ.ED50 <- SpatialPoints(cbind(x=IJ.east, y=IJ.north), proj4string=ED50)
### R code from vignette source 'die.Rnw'
### Encoding: UTF-8
# data: scotland.dat scot geohub.RData fires_120104 70042108.tif getosm.RData osm_bergen_120105.tif RgoogleMaps.RData osmar.RData
###################################################
### code chunk number 9: die.Rnw:95-96
###################################################
library(rgdal)
###################################################
### code chunk number 15: die.Rnw:306-307
###################################################
CRS("+init=epsg:4230")
###################################################
### code chunk number 16: die.Rnw:330-332
###################################################
ED50 <- CRS("+init=epsg:4230 +towgs84=-87,-96,-120,0,0,0,0")
ED50
IJ.ED50 <- SpatialPoints(cbind(x=IJ.east, y=IJ.north), proj4string=ED50)
res <- spTransform(IJ.ED50, CRS("+proj=longlat +datum=WGS84"))
View(res)
x <- as(dd2dms(coordinates(res)[1]), "character")
y <- as(dd2dms(coordinates(res)[2], TRUE), "character")
cat(x, y, "\n")
spDistsN1(coordinates(IJ.ED50), coordinates(res), longlat=TRUE)*1000
library(maptools)
gzAzimuth(coordinates(IJ.ED50), coordinates(res))
###################################################
### code chunk number 19: die.Rnw:430-434
###################################################
proj4string(IJ.ED50) <- CRS("+init=epsg:4230")
###################################################
### code chunk number 19: die.Rnw:430-434
###################################################
proj4string(IJ.ED50) <- CRS("+init=epsg:4230")
res <- spTransform(IJ.ED50, CRS("+proj=longlat +datum=WGS84"))
spDistsN1(coordinates(IJ.ED50), coordinates(res), longlat=TRUE)*1000
gzAzimuth(coordinates(IJ.ED50), coordinates(res))
###################################################
### code chunk number 21: die.Rnw:449-450
###################################################
if (class(EPSG) != "try-error") EPSG[grep("Atlas", EPSG$note), 1:2]
###################################################
### code chunk number 14: die.Rnw:264-266
###################################################
# From PROJ 6.0.0, EPSG data stored in an SQLite database without proj4 strings
EPSG <- try(make_EPSG())
if (class(EPSG) != "try-error") EPSG[grep("^# ED50$", EPSG$note),]
###################################################
### code chunk number 21: die.Rnw:449-450
###################################################
if (class(EPSG) != "try-error") EPSG[grep("Atlas", EPSG$note), 1:2]
grep("Atlas", EPSG$note)
###################################################
### code chunk number 21: die.Rnw:449-450
###################################################
if (class(EPSG) != "try-error") EPSG[grep("Atlas", EPSG$note), 1:2]
View(EPSG)
###################################################
### code chunk number 22: die.Rnw:452-453
###################################################
CRS("+init=epsg:2163")
###################################################
### code chunk number 24: die.Rnw:475-479
###################################################
proj <- projInfo("proj")
proj[proj$name == "laea",]
ellps <- projInfo("ellps")
ellps[grep("a=6370997", ellps$major),]
###################################################
### code chunk number 25: die.Rnw:521-523
###################################################
IJ.dms.E <- "4d31\'00\"E"
IJ.dms.N <- "52d28\'00\"N"
###################################################
### code chunk number 26: die.Rnw:533-538
###################################################
IJ_east <- char2dms(IJ.dms.E)
IJ_north <- char2dms(IJ.dms.N)
IJ_east
IJ_north
###################################################
### code chunk number 27: die.Rnw:552-553
###################################################
c(as(IJ_east, "numeric"), as(IJ_north, "numeric"))
28/60
###################################################
### code chunk number 28: die.Rnw:672-673
###################################################
head(ogrDrivers(), n=10)
###################################################
### code chunk number 31: die.Rnw:733-735
###################################################
scot_dat <- read.table("/Users/xiaomengyuan/Documents/Career/Skills/Statistics/modeling/nCoV2019/Applied Spatial Analysis with R/Chap4/scotland.dat", skip=1)
View(scot_dat)
names(scot_dat) <- c("District", "Observed", "Expected", "PcAFF", "Latitude", "Longitude")
###################################################
### code chunk number 34: die.Rnw:760-761
###################################################
ogrInfo(".", "scot")
library(rgdal)
###################################################
### code chunk number 34: die.Rnw:760-761
###################################################
ogrInfo(".", "scot")
###################################################
### code chunk number 37: die.Rnw:791-794
###################################################
scot_LL <- readOGR(dsn="scot.shp", layer="scot", integer64="allow.loss")
### R code from vignette source 'die.Rnw'
### Encoding: UTF-8
# data: scotland.dat scot geohub.RData fires_120104 70042108.tif getosm.RData osm_bergen_120105.tif RgoogleMaps.RData osmar.RData
###################################################
### code chunk number 9: die.Rnw:95-96
###################################################
library(rgdal)
###################################################
### code chunk number 14: die.Rnw:264-266
###################################################
# From PROJ 6.0.0, EPSG data stored in an SQLite database without proj4 strings
EPSG <- try(make_EPSG())
if (class(EPSG) != "try-error") EPSG[grep("^# ED50$", EPSG$note),]
###################################################
### code chunk number 15: die.Rnw:306-307
###################################################
CRS("+init=epsg:4230")
###################################################
### code chunk number 16: die.Rnw:330-332
###################################################
ED50 <- CRS("+init=epsg:4230 +towgs84=-87,-96,-120,0,0,0,0")
ED50
###################################################
### code chunk number 17: die.Rnw:358-368
###################################################
IJ.east <- as(char2dms("4d31\'00\"E"), "numeric")
IJ.north <- as(char2dms("52d28\'00\"N"), "numeric")
IJ.ED50 <- SpatialPoints(cbind(x=IJ.east, y=IJ.north), proj4string=ED50)
res <- spTransform(IJ.ED50, CRS("+proj=longlat +datum=WGS84"))
x <- as(dd2dms(coordinates(res)[1]), "character")
y <- as(dd2dms(coordinates(res)[2], TRUE), "character")
cat(x, y, "\n")
spDistsN1(coordinates(IJ.ED50), coordinates(res), longlat=TRUE)*1000
library(maptools)
gzAzimuth(coordinates(IJ.ED50), coordinates(res))
###################################################
### code chunk number 19: die.Rnw:430-434
###################################################
proj4string(IJ.ED50) <- CRS("+init=epsg:4230")
res <- spTransform(IJ.ED50, CRS("+proj=longlat +datum=WGS84"))
spDistsN1(coordinates(IJ.ED50), coordinates(res), longlat=TRUE)*1000
gzAzimuth(coordinates(IJ.ED50), coordinates(res))
###################################################
### code chunk number 21: die.Rnw:449-450
###################################################
if (class(EPSG) != "try-error") EPSG[grep("Atlas", EPSG$note), 1:2]
###################################################
### code chunk number 22: die.Rnw:452-453
###################################################
CRS("+init=epsg:2163")
###################################################
### code chunk number 24: die.Rnw:475-479
###################################################
proj <- projInfo("proj")
proj[proj$name == "laea",]
ellps <- projInfo("ellps")
ellps[grep("a=6370997", ellps$major),]
###################################################
### code chunk number 25: die.Rnw:521-523
###################################################
IJ.dms.E <- "4d31\'00\"E"
IJ.dms.N <- "52d28\'00\"N"
###################################################
### code chunk number 26: die.Rnw:533-538
###################################################
IJ_east <- char2dms(IJ.dms.E)
IJ_north <- char2dms(IJ.dms.N)
IJ_east
IJ_north
getSlots("DMS")
###################################################
### code chunk number 27: die.Rnw:552-553
###################################################
c(as(IJ_east, "numeric"), as(IJ_north, "numeric"))
###################################################
### code chunk number 28: die.Rnw:672-673
###################################################
head(ogrDrivers(), n=10)
###################################################
### code chunk number 31: die.Rnw:733-735
###################################################
scot_dat <- read.table("/Users/xiaomengyuan/Documents/Career/Skills/Statistics/modeling/nCoV2019/Applied Spatial Analysis with R/Chap4/scotland.dat", skip=1)
names(scot_dat) <- c("District", "Observed", "Expected", "PcAFF", "Latitude", "Longitude")
###################################################
### code chunk number 34: die.Rnw:760-761
###################################################
ogrInfo(".", "scot")
###################################################
### code chunk number 34: die.Rnw:760-761
###################################################
ogrInfo("scot.shp", "scot")
###################################################
### code chunk number 37: die.Rnw:791-794
###################################################
scot_LL <- readOGR(dsn="scot.shp", layer="scot", integer64="allow.loss")
###################################################
### code chunk number 34: die.Rnw:760-761
###################################################
ogrInfo("/Users/xiaomengyuan/Documents/Career/Skills/Statistics/modeling/nCoV2019/Applied Spatial Analysis with R/Chap4", "scot")
###################################################
### code chunk number 37: die.Rnw:791-794
###################################################
scot_LL <- readOGR(dsn="/Users/xiaomengyuan/Documents/Career/Skills/Statistics/modeling/nCoV2019/Applied Spatial Analysis with R/Chap4/scot.shp", layer="scot", integer64="allow.loss")
View(scot_LL)
proj4string(scot_LL)
proj4string(scot_LL) <- CRS("+proj=longlat +ellps=WGS84")
###################################################
### code chunk number 39: die.Rnw:803-805
###################################################
sapply(slot(scot_LL, "data"), class)
scot_LL$ID
###################################################
### code chunk number 40: die.Rnw:817-825
###################################################
scot_dat$District
ID_D <- match(scot_LL$ID, scot_dat$District)
ID_D
row.names(scot_LL)
scot_dat1 <- scot_dat[ID_D,]
row.names(scot_dat1) <- row.names(scot_LL)
library(maptools)
View(scot_dat1)
row.names(scot_dat1) <- row.names(scot_LL)
library(maptools)
scot_LLa <- spCbind(scot_LL, scot_dat1)
all.equal(scot_LLa$ID, scot_LLa$District)
names(scot_LLa)
View(scot_LLa)
?spTransform()
###################################################
### code chunk number 41: die.Rnw:846-852
###################################################
library(spdep)
library(DCluster)
install.packages("DCluster", lib="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
###################################################
### code chunk number 41: die.Rnw:846-852
###################################################
library(spdep)
O <- scot_LLa$Observed
E <- scot_LLa$Expected
scot_LLa$SMR <- probmap(O, E)$relRisk/100
library(DCluster)
scot_LLa$smth <- empbaysmooth(O, E)$smthrr
View(scot_LLa)
###################################################
### code chunk number 42: die.Rnw:863-864
###################################################
scot_BNG <- spTransform(scot_LLa, CRS("+init=epsg:27700"))
plot(scot_BNG)
plot(scot_LLa)
library(rgdal)
load("/Users/xiaomengyuan/Documents/Career/Skills/Statistics/modeling/nCoV2019/GitHub/COVID19_SouthKorea/Kobs.RData")
View(data2)
library(ggplot2)
library(tidyr)
data <- read.csv("Covid19_KCDC_Geo.csv")
setwd("~/Documents/Career/Skills/Statistics/modeling/nCoV2019/GitHub/COVID19_SouthKorea")
data <- read.csv("Covid19_KCDC_Geo.csv")
summary(data)
summary(data$location)
data$ID <- as.factor(data$ID)
summary(data$ID)
data$level <- rep(NA, 1114)
# add column level, city vs. province
for (i in 1:1114) {
ifelse(data$ID[i]==1 || data$ID[i]==4 || data$ID[i]==5 || data$ID[i]==7 ||
data$ID[i]==11 || data$ID[i]==15 || data$ID[i]==16 ||data$ID[i]==17,
data$level[i] <- "city", data$level[i] <- "province")
}
data$level <- as.factor(data$level)
summary(data$level)
# convert to date object
data$date <- as.Date(data$date)
# delete observations with time=16:00, as most obs w/ time= 0:00 and
# it's closer to 9:00.
data1 <- data[data$time!= "16:00", ]
# delete observations from Airport
data2 <- data1[data1$ID!=0, ]
row.names(data2) <- 1:1020
# create a column to represent difference between row i and i-1
data2$diff <- c(NA, diff(data2$total))
# check if new (newly confirmed) is equal to diff in total
dv <- which(data2$new!= data2$diff)
dv # rows where new != diff, a few cases
# [1]   5   6  69 190 191 219 245 249 250 305 425 485 486 491 785 786 905 906
# check these rows
# not verified w/ KCDC website yet as of 08-25-2020,
# it needs to check 6 notices (3 notices * 2 days) on KCDC for each occasion
# consider use column diff for sensitivity test
dr <- data2[dv, ]
View(dr)
###plot to check for if values looks correct
p <- ggplot(data2, aes(x=date, y=total)) +
geom_line() +
facet_wrap(~ID)
p
p1 <- ggplot(data2, aes(x=date, y=new)) +
geom_line() +
facet_wrap(~ID)
p1
########check if total is non-decreasing
nd <-which(diff(data2$total)<0)
nd
####### Check for NA
summary(data2$new)
summary(data2$total)
which(is.na(data2$total)) #every location missing 2-21 to 2-23
kna <- which(is.na(data2$total)) #every location missing 2-21 to 2-23
###### create t*i maxtrix for sts object
data3<-data2[ ,c(2,3,6)]
View(data3)
obs1 <- spread(data3, location, new)
View(data2)
save.image("~/Documents/Career/Skills/Statistics/modeling/nCoV2019/GitHub/COVID19_SouthKorea/Kobs.RData")
View(obs1)
saveRDS(obs1, file="obs1.RDS" )
View(p1)
# check if new (newly confirmed) is equal to diff in total
dv <- which(data2$new!= data2$diff)
dv # rows where new != diff, a few cases
nd
View(data3)
View(data2)
