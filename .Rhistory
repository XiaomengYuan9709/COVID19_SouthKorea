View(worldMapEnv)
###################################################
### chunk number 75:
###################################################
sat <- read.table("/Users/xiaomengyuan/Documents/Career/Skills/Statistics/modeling/nCoV2019/r-spatial-asdar-book.org-b1bdf88/docs/datasets/state.sat.data_mod.txt", row.names=5, header=TRUE)
View(sat)
str(sat)
sapply(slot(state.sp, "polygons"),
function(x) slot(x, "ID"))
id <- match(row.names(sat), sapply(slot(state.sp, "polygons"),
function(x) slot(x, "ID")))
row.names(sat)[is.na(id)]
sat[!is.na(id),]
state.spdf <- SpatialPolygonsDataFrame(state.sp, sat[!is.na(id),])
View(state.spdf)
str(slot(state.spdf, "data"))
str(state.spdf, max.level=2)
str(state.spdf, max.level=3)
View(sat)
###################################################
### chunk number 78:
###################################################
rownames(sat)[3] <- "Arizona"
try(SpatialPolygonsDataFrame(state.sp, sat[!is.na(id),]))
View(state.sp)
###################################################
### chunk number 79:
###################################################
DC <- "district of columbia"
not_dc <- !(row.names(slot(state.spdf, "data")) == DC)
state.spdf1 <- state.spdf[not_dc,]
View(state.spdf1)
length(slot(state.spdf1, "polygons"))
summary(state.spdf1)
summary(state.spdf1)
###################################################
### chunk number 80:
###################################################
# ** if you have the high resolution GSHHS shorelines database, use:
#high <- Rgshhs("gshhs_h.b", xlim=c(277,278),
# ylim=c(45.7,46.2))
# otherwise load a stored version from the bundle:
load("high.RData")
load("/Users/xiaomengyuan/Documents/Career/Skills/Statistics/modeling/nCoV2019/r-spatial-asdar-book.org-b1bdf88/docs/datasets/high.RData")
manitoulin_sp <- high$SP
View(high)
manitoulin_sp <- high$SP
View(manitoulin_sp)
###################################################
### chunk number 81:
###################################################
oopar <- par(mar=c(1,1,1,1)+0.1)
plot(manitoulin_sp, pbg="grey75", col="grey95")
text(t(sapply(slot(slot(manitoulin_sp, "polygons")[[1]], "Polygons"),
function(x) slot(x, "labpt")))[-c(1,2),], label=high$polydata$level[-c(1,2)],
col="black", font=2)
par(oopar)
View(high)
sapply(slot(slot(manitoulin_sp, "polygons")[[1]], "Polygons"),
function(x) slot(x, "labpt")))
sapply(slot(slot(manitoulin_sp, "polygons")[[1]], "Polygons"),
function(x) slot(x, "labpt"))
###################################################
### chunk number 82:
###################################################
length(slot(manitoulin_sp, "polygons"))
sapply(slot(slot(manitoulin_sp, "polygons")[[1]], "Polygons"),
function(x) slot(x, "hole"))
sapply(slot(slot(manitoulin_sp, "polygons")[[1]], "Polygons"),
function(x) slot(x, "ringDir"))
slot(manitoulin_sp, "polygons")[[1]]
slot(manitoulin_sp, "polygons")[[1]]
getClass(STS)
getClass(sts)
library(surveillance)
getClass(sts)
getClass("sts")
### R code from vignette source 'die.Rnw'
### Encoding: UTF-8
# data: scotland.dat scot geohub.RData fires_120104 70042108.tif getosm.RData osm_bergen_120105.tif RgoogleMaps.RData osmar.RData
###################################################
### code chunk number 9: die.Rnw:95-96
###################################################
library(rgdal)
###################################################
### code chunk number 14: die.Rnw:264-266
###################################################
# From PROJ 6.0.0, EPSG data stored in an SQLite database without proj4 strings
EPSG <- try(make_EPSG())
if (class(EPSG) != "try-error") EPSG[grep("^# ED50$", EPSG$note),]
###################################################
### code chunk number 17: die.Rnw:358-368
###################################################
IJ.east <- as(char2dms("4d31\'00\"E"), "numeric")
IJ.north <- as(char2dms("52d28\'00\"N"), "numeric")
IJ.ED50 <- SpatialPoints(cbind(x=IJ.east, y=IJ.north), proj4string=ED50)
### R code from vignette source 'die.Rnw'
### Encoding: UTF-8
# data: scotland.dat scot geohub.RData fires_120104 70042108.tif getosm.RData osm_bergen_120105.tif RgoogleMaps.RData osmar.RData
###################################################
### code chunk number 9: die.Rnw:95-96
###################################################
library(rgdal)
###################################################
### code chunk number 15: die.Rnw:306-307
###################################################
CRS("+init=epsg:4230")
###################################################
### code chunk number 16: die.Rnw:330-332
###################################################
ED50 <- CRS("+init=epsg:4230 +towgs84=-87,-96,-120,0,0,0,0")
ED50
IJ.ED50 <- SpatialPoints(cbind(x=IJ.east, y=IJ.north), proj4string=ED50)
res <- spTransform(IJ.ED50, CRS("+proj=longlat +datum=WGS84"))
View(res)
x <- as(dd2dms(coordinates(res)[1]), "character")
y <- as(dd2dms(coordinates(res)[2], TRUE), "character")
cat(x, y, "\n")
spDistsN1(coordinates(IJ.ED50), coordinates(res), longlat=TRUE)*1000
library(maptools)
gzAzimuth(coordinates(IJ.ED50), coordinates(res))
###################################################
### code chunk number 19: die.Rnw:430-434
###################################################
proj4string(IJ.ED50) <- CRS("+init=epsg:4230")
###################################################
### code chunk number 19: die.Rnw:430-434
###################################################
proj4string(IJ.ED50) <- CRS("+init=epsg:4230")
res <- spTransform(IJ.ED50, CRS("+proj=longlat +datum=WGS84"))
spDistsN1(coordinates(IJ.ED50), coordinates(res), longlat=TRUE)*1000
gzAzimuth(coordinates(IJ.ED50), coordinates(res))
###################################################
### code chunk number 21: die.Rnw:449-450
###################################################
if (class(EPSG) != "try-error") EPSG[grep("Atlas", EPSG$note), 1:2]
###################################################
### code chunk number 14: die.Rnw:264-266
###################################################
# From PROJ 6.0.0, EPSG data stored in an SQLite database without proj4 strings
EPSG <- try(make_EPSG())
if (class(EPSG) != "try-error") EPSG[grep("^# ED50$", EPSG$note),]
###################################################
### code chunk number 21: die.Rnw:449-450
###################################################
if (class(EPSG) != "try-error") EPSG[grep("Atlas", EPSG$note), 1:2]
grep("Atlas", EPSG$note)
###################################################
### code chunk number 21: die.Rnw:449-450
###################################################
if (class(EPSG) != "try-error") EPSG[grep("Atlas", EPSG$note), 1:2]
View(EPSG)
###################################################
### code chunk number 22: die.Rnw:452-453
###################################################
CRS("+init=epsg:2163")
###################################################
### code chunk number 24: die.Rnw:475-479
###################################################
proj <- projInfo("proj")
proj[proj$name == "laea",]
ellps <- projInfo("ellps")
ellps[grep("a=6370997", ellps$major),]
###################################################
### code chunk number 25: die.Rnw:521-523
###################################################
IJ.dms.E <- "4d31\'00\"E"
IJ.dms.N <- "52d28\'00\"N"
###################################################
### code chunk number 26: die.Rnw:533-538
###################################################
IJ_east <- char2dms(IJ.dms.E)
IJ_north <- char2dms(IJ.dms.N)
IJ_east
IJ_north
###################################################
### code chunk number 27: die.Rnw:552-553
###################################################
c(as(IJ_east, "numeric"), as(IJ_north, "numeric"))
28/60
###################################################
### code chunk number 28: die.Rnw:672-673
###################################################
head(ogrDrivers(), n=10)
###################################################
### code chunk number 31: die.Rnw:733-735
###################################################
scot_dat <- read.table("/Users/xiaomengyuan/Documents/Career/Skills/Statistics/modeling/nCoV2019/Applied Spatial Analysis with R/Chap4/scotland.dat", skip=1)
View(scot_dat)
names(scot_dat) <- c("District", "Observed", "Expected", "PcAFF", "Latitude", "Longitude")
###################################################
### code chunk number 34: die.Rnw:760-761
###################################################
ogrInfo(".", "scot")
library(rgdal)
###################################################
### code chunk number 34: die.Rnw:760-761
###################################################
ogrInfo(".", "scot")
###################################################
### code chunk number 37: die.Rnw:791-794
###################################################
scot_LL <- readOGR(dsn="scot.shp", layer="scot", integer64="allow.loss")
### R code from vignette source 'die.Rnw'
### Encoding: UTF-8
# data: scotland.dat scot geohub.RData fires_120104 70042108.tif getosm.RData osm_bergen_120105.tif RgoogleMaps.RData osmar.RData
###################################################
### code chunk number 9: die.Rnw:95-96
###################################################
library(rgdal)
###################################################
### code chunk number 14: die.Rnw:264-266
###################################################
# From PROJ 6.0.0, EPSG data stored in an SQLite database without proj4 strings
EPSG <- try(make_EPSG())
if (class(EPSG) != "try-error") EPSG[grep("^# ED50$", EPSG$note),]
###################################################
### code chunk number 15: die.Rnw:306-307
###################################################
CRS("+init=epsg:4230")
###################################################
### code chunk number 16: die.Rnw:330-332
###################################################
ED50 <- CRS("+init=epsg:4230 +towgs84=-87,-96,-120,0,0,0,0")
ED50
###################################################
### code chunk number 17: die.Rnw:358-368
###################################################
IJ.east <- as(char2dms("4d31\'00\"E"), "numeric")
IJ.north <- as(char2dms("52d28\'00\"N"), "numeric")
IJ.ED50 <- SpatialPoints(cbind(x=IJ.east, y=IJ.north), proj4string=ED50)
res <- spTransform(IJ.ED50, CRS("+proj=longlat +datum=WGS84"))
x <- as(dd2dms(coordinates(res)[1]), "character")
y <- as(dd2dms(coordinates(res)[2], TRUE), "character")
cat(x, y, "\n")
spDistsN1(coordinates(IJ.ED50), coordinates(res), longlat=TRUE)*1000
library(maptools)
gzAzimuth(coordinates(IJ.ED50), coordinates(res))
###################################################
### code chunk number 19: die.Rnw:430-434
###################################################
proj4string(IJ.ED50) <- CRS("+init=epsg:4230")
res <- spTransform(IJ.ED50, CRS("+proj=longlat +datum=WGS84"))
spDistsN1(coordinates(IJ.ED50), coordinates(res), longlat=TRUE)*1000
gzAzimuth(coordinates(IJ.ED50), coordinates(res))
###################################################
### code chunk number 21: die.Rnw:449-450
###################################################
if (class(EPSG) != "try-error") EPSG[grep("Atlas", EPSG$note), 1:2]
###################################################
### code chunk number 22: die.Rnw:452-453
###################################################
CRS("+init=epsg:2163")
###################################################
### code chunk number 24: die.Rnw:475-479
###################################################
proj <- projInfo("proj")
proj[proj$name == "laea",]
ellps <- projInfo("ellps")
ellps[grep("a=6370997", ellps$major),]
###################################################
### code chunk number 25: die.Rnw:521-523
###################################################
IJ.dms.E <- "4d31\'00\"E"
IJ.dms.N <- "52d28\'00\"N"
###################################################
### code chunk number 26: die.Rnw:533-538
###################################################
IJ_east <- char2dms(IJ.dms.E)
IJ_north <- char2dms(IJ.dms.N)
IJ_east
IJ_north
getSlots("DMS")
###################################################
### code chunk number 27: die.Rnw:552-553
###################################################
c(as(IJ_east, "numeric"), as(IJ_north, "numeric"))
###################################################
### code chunk number 28: die.Rnw:672-673
###################################################
head(ogrDrivers(), n=10)
###################################################
### code chunk number 31: die.Rnw:733-735
###################################################
scot_dat <- read.table("/Users/xiaomengyuan/Documents/Career/Skills/Statistics/modeling/nCoV2019/Applied Spatial Analysis with R/Chap4/scotland.dat", skip=1)
names(scot_dat) <- c("District", "Observed", "Expected", "PcAFF", "Latitude", "Longitude")
###################################################
### code chunk number 34: die.Rnw:760-761
###################################################
ogrInfo(".", "scot")
###################################################
### code chunk number 34: die.Rnw:760-761
###################################################
ogrInfo("scot.shp", "scot")
###################################################
### code chunk number 37: die.Rnw:791-794
###################################################
scot_LL <- readOGR(dsn="scot.shp", layer="scot", integer64="allow.loss")
###################################################
### code chunk number 34: die.Rnw:760-761
###################################################
ogrInfo("/Users/xiaomengyuan/Documents/Career/Skills/Statistics/modeling/nCoV2019/Applied Spatial Analysis with R/Chap4", "scot")
###################################################
### code chunk number 37: die.Rnw:791-794
###################################################
scot_LL <- readOGR(dsn="/Users/xiaomengyuan/Documents/Career/Skills/Statistics/modeling/nCoV2019/Applied Spatial Analysis with R/Chap4/scot.shp", layer="scot", integer64="allow.loss")
View(scot_LL)
proj4string(scot_LL)
proj4string(scot_LL) <- CRS("+proj=longlat +ellps=WGS84")
###################################################
### code chunk number 39: die.Rnw:803-805
###################################################
sapply(slot(scot_LL, "data"), class)
scot_LL$ID
###################################################
### code chunk number 40: die.Rnw:817-825
###################################################
scot_dat$District
ID_D <- match(scot_LL$ID, scot_dat$District)
ID_D
row.names(scot_LL)
scot_dat1 <- scot_dat[ID_D,]
row.names(scot_dat1) <- row.names(scot_LL)
library(maptools)
View(scot_dat1)
row.names(scot_dat1) <- row.names(scot_LL)
library(maptools)
scot_LLa <- spCbind(scot_LL, scot_dat1)
all.equal(scot_LLa$ID, scot_LLa$District)
names(scot_LLa)
View(scot_LLa)
?spTransform()
###################################################
### code chunk number 41: die.Rnw:846-852
###################################################
library(spdep)
library(DCluster)
install.packages("DCluster", lib="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
###################################################
### code chunk number 41: die.Rnw:846-852
###################################################
library(spdep)
O <- scot_LLa$Observed
E <- scot_LLa$Expected
scot_LLa$SMR <- probmap(O, E)$relRisk/100
library(DCluster)
scot_LLa$smth <- empbaysmooth(O, E)$smthrr
View(scot_LLa)
###################################################
### code chunk number 42: die.Rnw:863-864
###################################################
scot_BNG <- spTransform(scot_LLa, CRS("+init=epsg:27700"))
plot(scot_BNG)
plot(scot_LLa)
library(rgdal)
load("/Users/xiaomengyuan/Documents/Career/Skills/Statistics/modeling/nCoV2019/GitHub/COVID19_SouthKorea/ksts.RData")
setwd("~/Documents/Career/Skills/Statistics/modeling/nCoV2019/GitHub/COVID19_SouthKorea")
View(ksts)
ncol(ksts)
popluation(ksts)
population(ksts)
dim(ksts)
[if is(ksts, "sts")]
if is (ksts, "sts")
is(ksts, "sts")
population(ksts)
knitr::opts_chunk$set(echo = TRUE)
library(surveillance)
library(animation)
#see stsplot_space {surveillance} for help info
#tpop <- sum(prow) # total population in the country
#tpop
plot(ksts, type = observed ~ unit,
population = ksts@map$populationFrac/100000,
labels = list(font = 2), colorkey = list(space = "right"), sp.layout = layout.scalebar(ksts@map,
corner = c(0.05, 0.05), scale = 50, labels = c("0", "50 km"), height = 0.03))
plot(ksts, type = observed ~ unit,
population = population(ksts)/100000,
labels = list(font = 2), colorkey = list(space = "right"), sp.layout = layout.scalebar(ksts@map,
corner = c(0.05, 0.05), scale = 50, labels = c("0", "50 km"), height = 0.03))
library(surveillance)
knitr::opts_chunk$set(echo = TRUE)
library(surveillance)
library(spdep)
library(animation)
library(gridExtra)
data(measlesWeserEms)
View(measlesWeserEms)
population(measlesWeserEms)
rm(measlesWeserEms)
plot(ksts, type = observed ~ unit,
population = prow,
labels = list(font = 2), colorkey = list(space = "right"), sp.layout = layout.scalebar(ksts@map,
corner = c(0.05, 0.05), scale = 50, labels = c("0", "50 km"), height = 0.03))
# use a vector of regional populations to plot incidence
# see tsplot_space {surveillance}
plot(ksts, type = observed ~ unit,
population = prow/100000,
labels = list(font = 2), colorkey = list(space = "right"), sp.layout = layout.scalebar(ksts@map,
corner = c(0.05, 0.05), scale = 50, labels = c("0", "50 km"), height = 0.03))
kmod_basic <- list(
end = list(f = ~1,
offset = population(ksts)),
ar = list(f = ~1),
ne = list(f = ~1, weights = neighbourhood(ksts) == 1),
family = "NegBin1")
kfit_basic <- hhh4(stsObj = ksts,control = kmod_basic)
summary(kfit_basic, idx2Exp = TRUE, amplitudeShift = TRUE, maxEV = TRUE)
View(kfit_basic)
kfit_basic <- hhh4(stsObj = ksts,control = kmod_basic)
kmod_basic <- list(
end = list(f = ~1,
offset = population(ksts)),
ar = list(f = ~1),
ne = list(f = ~1, weights = neighbourhood(ksts) == 1),
family = "NegBin1", iter.max=300)
kfit_basic <- hhh4(stsObj = ksts,control = kmod_basic)
kmod_basic <- list(
end = list(f = ~1,
offset = population(ksts)),
ar = list(f = ~1),
ne = list(f = ~1, weights = neighbourhood(ksts) == 1),
family = "NegBin1", iter.max=1000)
kfit_basic <- hhh4(stsObj = ksts,control = kmod_basic)
kmod_basic <- list(
end = list(f = ~1,
offset = population(ksts)),
ar = list(f = ~1),
ne = list(f = ~1, weights = neighbourhood(ksts) == 1),
family = "Poisson")
kfit_basic <- hhh4(stsObj = ksts,control = kmod_basic)
summary(kfit_basic, idx2Exp = TRUE, amplitudeShift = TRUE, maxEV = TRUE)
kctrl0_basic <- list(
end = list(f = ~1,
offset = population(ksts)),
ar = list(f = ~1),
ne = list(f = ~1, weights = neighbourhood(ksts) == 1),
family = "Poisson")
kfit0_basic <- hhh4(stsObj = ksts,control = kctrl0_basic)
summary(kfit0_basic, idx2Exp = TRUE, amplitudeShift = TRUE, maxEV = TRUE)
kctrl0_basic <- list(
end = list(f = ~1,
offset = population(ksts)),
ar = list(f = ~1),
ne = list(f = ~1, weights = neighbourhood(ksts) == 1),
family = "NegBin1")
kfit0_basic <- hhh4(stsObj = ksts,control = kctrl0_basic)
summary(kfit0_basic, idx2Exp = TRUE, amplitudeShift = TRUE, maxEV = TRUE)
kctrl1_basic <- list(
end = list(f = ~1,
offset = population(ksts)),
ar = list(f = ~1),
ne = list(f = ~1, weights = neighbourhood(ksts) == 1),
family = "Poisson")
kfit1_basic <- hhh4(stsObj = ksts,control = kctrl1_basic)
summary(kfit_basic, idx2Exp = TRUE, amplitudeShift = TRUE, maxEV = TRUE)
rm(kmod_basic)
rm(kfit_basic)
confint(kfit0_basic, parm = "overdisp")
summary(kfit0_basic, idx2Exp = TRUE, amplitudeShift = TRUE, maxEV = TRUE)
AIC(kfit1_basic)
summary(kfit_basic, idx2Exp = TRUE, amplitudeShift = TRUE, maxEV = TRUE)
kctrl1_basic <- list(
end = list(f = ~1,
offset = population(ksts)),
ar = list(f = ~1),
ne = list(f = ~1, weights = neighbourhood(ksts) == 1),
family = "Poisson")
kfit1_basic <- hhh4(stsObj = ksts,control = kctrl1_basic)
summary(kfit_basic1, idx2Exp = TRUE, amplitudeShift = TRUE, maxEV = TRUE)
kctrl1_basic <- list(
end = list(f = ~1,
offset = population(ksts)),
ar = list(f = ~1),
ne = list(f = ~1, weights = neighbourhood(ksts) == 1),
family = "Poisson")
kfit1_basic <- hhh4(stsObj = ksts,control = kctrl1_basic)
summary(kfit_basic1, idx2Exp = TRUE, amplitudeShift = TRUE, maxEV = TRUE)
kctrl1_basic <- list(
end = list(f = ~1,
offset = population(ksts)),
ar = list(f = ~1),
ne = list(f = ~1, weights = neighbourhood(ksts) == 1),
family = "Poisson")
kfit1_basic <- hhh4(stsObj = ksts,control = kctrl1_basic)
summary(kfit1_basic, idx2Exp = TRUE, amplitudeShift = TRUE, maxEV = TRUE)
plot(kfit1_basic, type = "fitted", units = districts2plot, + hide0s = TRUE)
plot(kfit1_basic, type = "fitted", units = districts2plot, hide0s = TRUE)
districts2plot <- which(colSums(observed(ksts)) > 20)
plot(kfit1_basic, type = "fitted", units = districts2plot, hide0s = TRUE)
View(kfit1_basic)
View(kfit0_basic)
save.image("~/Documents/Career/Skills/Statistics/modeling/nCoV2019/GitHub/COVID19_SouthKorea/ksts.RData")
kctrl2_basic <- list(
end = list(f = ~1,
offset = population(ksts)),
ar = list(f = ~1),
ne = list(f = ~1, weights = neighbourhood(ksts) == 1),
family = "NegBinM")
kfit2_basic <- hhh4(stsObj = ksts,control = kctrl2_basic)
summary(kfit2_basic, idx2Exp = TRUE, amplitudeShift = TRUE, maxEV = TRUE)
kctrl1_basic <- list(
end = list(f = ~1,
offset = population(ksts)/sum(prow)),
ar = list(f = ~1),
ne = list(f = ~1, weights = neighbourhood(ksts) == 1),
family = "Poisson")
kfit1_basic <- hhh4(stsObj = ksts,control = kctrl1_basic)
summary(kfit1_basic, idx2Exp = TRUE, amplitudeShift = TRUE, maxEV = TRUE)
AIC(kfit1_basic)
ksts@populationFrac
save.image("~/Documents/Career/Skills/Statistics/modeling/nCoV2019/GitHub/COVID19_SouthKorea/ksts.RData")
